{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": { "description": "Resources location" }
    },
    "servicePrincipalObjectId": {
      "type": "String",
      "metadata": { "description": "Service principal Object Id, needed for Role Assignment cleanup" }
    },
    "targetSubscriptions": {
      "type": "array",
      "defaultValue": ["[subscription().subscriptionId]"],
      "metadata": { "description": "Array of subscription IDs to remove Firefly monitoring from" }
    },
    "isMultiSubscription": {
      "type": "bool",
      "defaultValue": false,
      "metadata": { "description": "Whether this is a multi-subscription deployment cleanup" }
    },
    "eventDrivenEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": { "description": "Whether event-driven monitoring was enabled (to clean up related resources)" }
    },
    "newguid": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
          "description": "Just a Guid to append to deployment script name"
      }
    }
  },
  "variables": {
    "effectiveSubscriptions": "[if(parameters('isMultiSubscription'), parameters('targetSubscriptions'), createArray(subscription().subscriptionId))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('firefly-offboard-', copyIndex(), '-', parameters('newguid'))]",
      "location": "[parameters('location')]",
      "subscriptionId": "[variables('effectiveSubscriptions')[copyIndex()]]",
      "copy": {
        "name": "offboardingLoop",
        "count": "[length(variables('effectiveSubscriptions'))]"
      },
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "targetSubscriptionId": { "value": "[variables('effectiveSubscriptions')[copyIndex()]]" },
          "servicePrincipalObjectId": { "value": "[parameters('servicePrincipalObjectId')]" },
          "eventDrivenEnabled": { "value": "[parameters('eventDrivenEnabled')]" },
          "newguid": { "value": "[parameters('newguid')]" },
          "location": { "value": "[parameters('location')]" }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "targetSubscriptionId": { "type": "string" },
            "servicePrincipalObjectId": { "type": "string" },
            "eventDrivenEnabled": { "type": "bool" },
            "newguid": { "type": "string" },
            "location": { "type": "string" }
          },
          "variables": {
            "resourceGroupName": "[concat('firefly-monitoring-', parameters('targetSubscriptionId'))]",
            "uniqueCustomRoleName": "[concat('Firefly-', uniqueString(parameters('targetSubscriptionId')))]",
            "fireflyStorageBlobReaderRoleName": "[concat('Firefly-StorageBlobReader-', uniqueString(parameters('targetSubscriptionId')))]"
          },
          "resources": [
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[concat('firefly-cleanup-diag-settings-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "subscriptionId": "[parameters('targetSubscriptionId')]",
              "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {},
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[concat('firefly-cleanup-diag-script-', parameters('newguid'))]",
                      "location": "[parameters('location')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "retentionInterval": "PT1H",
                        "timeout": "PT5M",
                        "containerSettings": {},
                        "cleanupPreference": "Always",
                        "azPowerShellVersion": "8.1",
                        "environmentVariables": [
                          { "name": "SUBSCRIPTION_ID", "value": "[subscription().subscriptionId]" }
                        ],
                        "scriptContent": "# Remove diagnostic settings\ntry {\n    $diagSettingName = \"firefly-diag-$Env:SUBSCRIPTION_ID\"\n    Write-Host \"Attempting to remove diagnostic setting: $diagSettingName\"\n    \n    # Check if diagnostic setting exists\n    $existingDiagSetting = Get-AzDiagnosticSetting -ResourceId \"/subscriptions/$Env:SUBSCRIPTION_ID\" -Name $diagSettingName -ErrorAction SilentlyContinue\n    \n    if ($existingDiagSetting) {\n        Remove-AzDiagnosticSetting -ResourceId \"/subscriptions/$Env:SUBSCRIPTION_ID\" -Name $diagSettingName\n        Write-Host \"Successfully removed diagnostic setting: $diagSettingName\"\n    } else {\n        Write-Host \"Diagnostic setting $diagSettingName not found, skipping removal\"\n    }\n} catch {\n    Write-Warning \"Failed to remove diagnostic setting: $($_.Exception.Message)\"\n}\n\nWrite-Host \"Diagnostic settings cleanup completed\""
                      }
                    }
                  ],
                  "outputs": {}
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[concat('firefly-cleanup-role-assignments-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "subscriptionId": "[parameters('targetSubscriptionId')]",
              "dependsOn": [
                "[concat('firefly-cleanup-diag-settings-', parameters('newguid'))]"
              ],
              "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "parameters": {
                  "servicePrincipalObjectId": {
                    "value": "[parameters('servicePrincipalObjectId')]"
                  },
                  "targetSubscriptionId": {
                    "value": "[parameters('targetSubscriptionId')]"
                  },
                  "newguid": {
                    "value": "[parameters('newguid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "servicePrincipalObjectId": { "type": "string" },
                    "targetSubscriptionId": { "type": "string" },
                    "newguid": { "type": "string" }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[concat('firefly-cleanup-assignments-script-', parameters('newguid'))]",
                      "location": "[resourceGroup().location]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "retentionInterval": "PT1H",
                        "timeout": "PT10M",
                        "containerSettings": {},
                        "cleanupPreference": "Always",
                        "azPowerShellVersion": "8.1",
                        "environmentVariables": [
                          { "name": "SUBSCRIPTION_ID", "value": "[parameters('targetSubscriptionId')]" },
                          { "name": "SERVICE_PRINCIPAL_OBJECT_ID", "value": "[parameters('servicePrincipalObjectId')]" }
                        ],
                        "scriptContent": "# Remove role assignments for the service principal\ntry {\n    Write-Host \"Removing role assignments for service principal $Env:SERVICE_PRINCIPAL_OBJECT_ID in subscription $Env:SUBSCRIPTION_ID\"\n    \n    # Get all role assignments for the service principal in this subscription\n    $roleAssignments = Get-AzRoleAssignment -ObjectId $Env:SERVICE_PRINCIPAL_OBJECT_ID -Scope \"/subscriptions/$Env:SUBSCRIPTION_ID\" -ErrorAction SilentlyContinue\n    \n    if ($roleAssignments) {\n        foreach ($assignment in $roleAssignments) {\n            try {\n                Write-Host \"Removing role assignment: $($assignment.RoleDefinitionName) on scope $($assignment.Scope)\"\n                Remove-AzRoleAssignment -ObjectId $assignment.ObjectId -RoleDefinitionId $assignment.RoleDefinitionId -Scope $assignment.Scope -ErrorAction SilentlyContinue\n                Write-Host \"Successfully removed role assignment: $($assignment.RoleDefinitionName)\"\n            } catch {\n                Write-Warning \"Failed to remove role assignment $($assignment.RoleDefinitionName): $($_.Exception.Message)\"\n            }\n        }\n    } else {\n        Write-Host \"No role assignments found for service principal in this subscription\"\n    }\n    \n    # Also check for assignments on resource groups and storage accounts\n    $resourceGroups = Get-AzResourceGroup | Where-Object { $_.ResourceGroupName -like 'firefly-monitoring-*' }\n    foreach ($rg in $resourceGroups) {\n        Write-Host \"Checking role assignments in resource group: $($rg.ResourceGroupName)\"\n        $rgAssignments = Get-AzRoleAssignment -ObjectId $Env:SERVICE_PRINCIPAL_OBJECT_ID -Scope $rg.ResourceId -ErrorAction SilentlyContinue\n        foreach ($assignment in $rgAssignments) {\n            try {\n                Remove-AzRoleAssignment -ObjectId $assignment.ObjectId -RoleDefinitionId $assignment.RoleDefinitionId -Scope $assignment.Scope -ErrorAction SilentlyContinue\n                Write-Host \"Removed role assignment: $($assignment.RoleDefinitionName) from $($rg.ResourceGroupName)\"\n            } catch {\n                Write-Warning \"Failed to remove role assignment from $($rg.ResourceGroupName): $($_.Exception.Message)\"\n            }\n        }\n    }\n    \n} catch {\n    Write-Warning \"Error during role assignment cleanup: $($_.Exception.Message)\"\n}\n\nWrite-Host \"Role assignments cleanup completed\""
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[concat('firefly-cleanup-resource-groups-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "subscriptionId": "[parameters('targetSubscriptionId')]",
              "dependsOn": [
                "[concat('firefly-cleanup-role-assignments-', parameters('newguid'))]"
              ],
              "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "parameters": {
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "newguid": {
                    "value": "[parameters('newguid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "resourceGroupName": { "type": "string" },
                    "newguid": { "type": "string" }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[concat('firefly-cleanup-rg-script-', parameters('newguid'))]",
                      "location": "[resourceGroup().location]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "retentionInterval": "PT1H",
                        "timeout": "PT15M",
                        "containerSettings": {},
                        "cleanupPreference": "Always",
                        "azPowerShellVersion": "8.1",
                        "environmentVariables": [
                          { "name": "RESOURCE_GROUP_NAME", "value": "[parameters('resourceGroupName')]" }
                        ],
                        "scriptContent": "# Remove Firefly resource groups\ntry {\n    Write-Host \"Attempting to remove resource group: $Env:RESOURCE_GROUP_NAME\"\n    \n    # Check if resource group exists\n    $resourceGroup = Get-AzResourceGroup -Name $Env:RESOURCE_GROUP_NAME -ErrorAction SilentlyContinue\n    \n    if ($resourceGroup) {\n        Write-Host \"Resource group $Env:RESOURCE_GROUP_NAME found, proceeding with deletion\"\n        \n        # Remove the resource group (this will delete all resources within it)\n        Remove-AzResourceGroup -Name $Env:RESOURCE_GROUP_NAME -Force -AsJob\n        \n        # Wait for deletion to complete (with timeout)\n        $timeout = 900 # 15 minutes\n        $timer = 0\n        do {\n            Start-Sleep -Seconds 30\n            $timer += 30\n            $stillExists = Get-AzResourceGroup -Name $Env:RESOURCE_GROUP_NAME -ErrorAction SilentlyContinue\n            Write-Host \"Waiting for resource group deletion... ($timer seconds elapsed)\"\n        } while ($stillExists -and $timer -lt $timeout)\n        \n        if ($stillExists) {\n            Write-Warning \"Resource group deletion is taking longer than expected. It may still be in progress.\"\n        } else {\n            Write-Host \"Successfully removed resource group: $Env:RESOURCE_GROUP_NAME\"\n        }\n    } else {\n        Write-Host \"Resource group $Env:RESOURCE_GROUP_NAME not found, skipping removal\"\n    }\n} catch {\n    Write-Warning \"Failed to remove resource group $Env:RESOURCE_GROUP_NAME : $($_.Exception.Message)\"\n}\n\nWrite-Host \"Resource group cleanup completed\""
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[concat('firefly-cleanup-role-definitions-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "subscriptionId": "[parameters('targetSubscriptionId')]",
              "dependsOn": [
                "[concat('firefly-cleanup-resource-groups-', parameters('newguid'))]"
              ],
              "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "parameters": {
                  "customRoleName": {
                    "value": "[variables('uniqueCustomRoleName')]"
                  },
                  "storageBlobReaderRoleName": {
                    "value": "[variables('fireflyStorageBlobReaderRoleName')]"
                  },
                  "newguid": {
                    "value": "[parameters('newguid')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "customRoleName": { "type": "string" },
                    "storageBlobReaderRoleName": { "type": "string" },
                    "newguid": { "type": "string" }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[concat('firefly-cleanup-roles-script-', parameters('newguid'))]",
                      "location": "[resourceGroup().location]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "retentionInterval": "PT1H",
                        "timeout": "PT5M",
                        "containerSettings": {},
                        "cleanupPreference": "Always",
                        "azPowerShellVersion": "8.1",
                        "environmentVariables": [
                          { "name": "CUSTOM_ROLE_NAME", "value": "[parameters('customRoleName')]" },
                          { "name": "STORAGE_BLOB_READER_ROLE_NAME", "value": "[parameters('storageBlobReaderRoleName')]" },
                          { "name": "SUBSCRIPTION_ID", "value": "[subscription().subscriptionId]" }
                        ],
                        "scriptContent": "# Remove custom role definitions\ntry {\n    Write-Host \"Removing custom role definitions for Firefly\"\n    \n    # Remove the main Firefly custom role\n    $customRoleId = [guid]::new(\"fireflyCustomRole\" + $Env:SUBSCRIPTION_ID).ToString()\n    $customRole = Get-AzRoleDefinition -Id $customRoleId -ErrorAction SilentlyContinue\n    if ($customRole) {\n        Remove-AzRoleDefinition -Id $customRoleId -Force -ErrorAction SilentlyContinue\n        Write-Host \"Removed custom role: $Env:CUSTOM_ROLE_NAME\"\n    } else {\n        Write-Host \"Custom role $Env:CUSTOM_ROLE_NAME not found, skipping removal\"\n    }\n    \n    # Remove the storage blob reader custom role\n    $storageBlobRoleId = [guid]::new(\"fireflyStorageBlobReader\" + $Env:SUBSCRIPTION_ID).ToString()\n    $storageBlobRole = Get-AzRoleDefinition -Id $storageBlobRoleId -ErrorAction SilentlyContinue\n    if ($storageBlobRole) {\n        Remove-AzRoleDefinition -Id $storageBlobRoleId -Force -ErrorAction SilentlyContinue\n        Write-Host \"Removed storage blob reader role: $Env:STORAGE_BLOB_READER_ROLE_NAME\"\n    } else {\n        Write-Host \"Storage blob reader role $Env:STORAGE_BLOB_READER_ROLE_NAME not found, skipping removal\"\n    }\n    \n} catch {\n    Write-Warning \"Error during role definition cleanup: $($_.Exception.Message)\"\n}\n\nWrite-Host \"Role definitions cleanup completed\""
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "subscriptionId": {
              "type": "string",
              "value": "[parameters('targetSubscriptionId')]"
            },
            "cleanupStatus": {
              "type": "string",
              "value": "Completed"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "offboardingSummary": {
      "type": "object",
      "value": {
        "subscriptionsProcessed": "[variables('effectiveSubscriptions')]",
        "totalSubscriptions": "[length(variables('effectiveSubscriptions'))]",
        "isMultiSubscription": "[parameters('isMultiSubscription')]",
        "eventDrivenCleanup": "[parameters('eventDrivenEnabled')]",
        "offboardingMethod": "[if(parameters('isMultiSubscription'), 'Multi-Subscription', 'Single-Subscription')]"
      }
    },
    "subscriptionResults": {
      "type": "array",
      "copy": {
        "count": "[length(variables('effectiveSubscriptions'))]",
        "input": {
          "subscriptionId": "[variables('effectiveSubscriptions')[copyIndex()]]",
          "resourceGroup": "[concat('firefly-monitoring-', variables('effectiveSubscriptions')[copyIndex()])]",
          "offboardingName": "[concat('firefly-offboard-', copyIndex(), '-', parameters('newguid'))]",
          "status": "Cleaned"
        }
      }
    }
  }
} 