{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": { "description": "Resources location" }
    },
    "servicePrincipalObjectId": {
      "type": "String",
      "metadata": { "description": "Service principal Object Id, needed for Role Assignment" }
    },
    "servicePrincipalClientId": {
      "type": "String",
      "metadata": { "description": "Service principal Client Id" }
    },
    "servicePrincipalClientSecret": {
      "type": "securestring",
      "metadata": { "description": "Service principal client secret" }
    },
    "subscriptionsList": {
      "type": "array",
      "defaultValue": ["[subscription().subscriptionId]"],
      "metadata": { "description": "Subscriptions list to onboard" }
    },
    "subscriptionCount": {
      "type": "int",
      "defaultValue": "[length(parameters('subscriptionsList'))]"
    },
    "fireflyAccessKey": {
      "type": "securestring",
      "metadata": { "description": "Firefly access key" }
    },
    "fireflySecretKey": {
      "type": "securestring",
      "metadata": { "description": "Firefly secret key" }
    },
    "eventDrivenEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": { "description": "Enable event-driven monitoring for subscriptions" }
    },
    "fireflyWebhookUrl": {
      "type": "string",
      "defaultValue": "https://azureevents-env1.dev.firefly.ai",
      "metadata": { "description": "Firefly webhook URL for event notifications" }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('firefly', uniqueString(subscription().subscriptionId, resourceGroup().id))]",
      "metadata": { "description": "Name for the storage account (must be globally unique)" }
    },
    "eventGridTopicName": {
      "type": "string",
      "defaultValue": "[concat('firefly-events-', resourceGroup().name, '-', parameters('newguid'))]",
      "metadata": { "description": "Name for the Event Grid system topic" }
    },
    "customRoleName": {
      "type": "string",
      "defaultValue": "[concat('Firefly-', uniqueString(subscription().subscriptionId))]",
      "metadata": { "description": "Name for the custom Firefly role definition" }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": { "description": "Prefix for resource naming" }
    },
    "suffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": { "description": "Suffix for resource naming" }
    },
    "resourceGroupPrefix": {
      "type": "string",
      "defaultValue": "firefly-rg",
      "metadata": { "description": "Prefix for resource groups created in each subscription" }
    },
    "enforceStorageNetworkRules": {
      "type": "bool",
      "defaultValue": false,
      "metadata": { "description": "Enforce storage network rules to restrict access to Firefly IPs only" }
    },
    "fireflyEips": {
      "type": "array",
      "defaultValue": [
        "3.224.145.192",
        "54.83.245.177",
        "3.213.167.195",
        "54.146.252.237",
        "34.226.97.113"
      ],
      "metadata": { "description": "Firefly IP addresses for storage account network rules" }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": { "description": "Tags to apply to created resources" }
    },
    "createResourceProviderRegistration": {
      "type": "bool",
      "defaultValue": true,
      "metadata": { "description": "Create microsoft.insights resource provider registration" }
    },
    "isProd": {
      "type": "bool",
      "defaultValue": false,
      "metadata": { "description": "Is this a production environment" }
    },
    "directoryDomain": {
      "type": "string",
      "defaultValue": "firefly.ai",
      "metadata": { "description": "Directory domain for Firefly integration" }
    },
    "newguid": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
          "description": "Just a Guid to append to deployment script name"
      }
    }
  },
  "variables": {
    "mergedTags": "[union(parameters('tags'), createObject('firefly', 'true'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('firefly-custom-roles-', parameters('newguid'))]",
      "subscriptionId": "[subscription().subscriptionId]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "customRoleName": {
              "value": "[parameters('customRoleName')]"
          },
          "servicePrincipalObjectId": {
              "value": "[parameters('servicePrincipalObjectId')]"
          },
          "newguid": {
              "value": "[parameters('newguid')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "customRoleName": {
                  "type": "String"
              },
              "servicePrincipalObjectId": {
                  "type": "String"
              },
              "newguid": {
                  "type": "String"
              }
          },
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[guid('fireflyCustomRole', subscription().subscriptionId)]",
              "properties": {
                "roleName": "[parameters('customRoleName')]",
                "description": "Firefly's requested permissions",
                "type": "customRole",
                "permissions": [
                  {
                    "actions": [
                      "Microsoft.Storage/storageAccounts/listkeys/action",
                      "Microsoft.DocumentDB/databaseAccounts/listConnectionStrings/action",
                      "Microsoft.DocumentDB/databaseAccounts/listKeys/action",
                      "Microsoft.DocumentDB/databaseAccounts/readonlykeys/action",
                      "Microsoft.ContainerService/managedClusters/listClusterUserCredential/action",
                      "Microsoft.Web/sites/config/list/Action",
                      "Microsoft.Cache/redis/listKeys/action",
                      "Microsoft.AppConfiguration/configurationStores/ListKeys/action",
                      "Microsoft.Search/searchServices/listQueryKeys/action",
                      "Microsoft.Search/searchServices/listAdminKeys/action",
                      "Microsoft.Authorization/roleAssignments/read",
                      "Microsoft.OperationalInsights/workspaces/sharedkeys/action"
                    ],
                    "notActions": [],
                    "dataActions": [],
                    "notDataActions": []
                  }
                ],
                "assignableScopes": [
                  "[subscription().id]"
                ]
              }
            },
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[guid('fireflyStorageBlobReader', subscription().subscriptionId)]",
              "properties": {
                "roleName": "[concat('Firefly-StorageBlobReader-', uniqueString(subscription().subscriptionId))]",
                "description": "Firefly's storage blob read permissions",
                "type": "customRole",
                "permissions": [
                  {
                    "actions": [],
                    "notActions": [],
                    "dataActions": [
                      "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read"
                    ],
                    "notDataActions": []
                  }
                ],
                "assignableScopes": [
                  "[subscription().id]"
                ]
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('servicePrincipalObjectId'), 'StorageBlobDataReaderConditional', subscription().subscriptionId, parameters('newguid'))]",
              "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal",
                "conditionVersion": "2.0",
                "condition": "((!(ActionMatches{'Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read'} AND NOT SubOperationMatches{'Blob.List'})) OR (@Resource[Microsoft.Storage/storageAccounts/blobServices/containers/blobs:path] StringLike '*state'))"
              }
            }
          ],
          "outputs": {}
        }
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[concat('firefly-integration-script-', parameters('newguid'))]",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "properties": {
        "retentionInterval": "PT1H",
        "timeout": "PT2M",
        "containerSettings": {},
        "cleanupPreference": "Always",
        "azPowerShellVersion": "8.1",
        "environmentVariables": [
          { "name": "SUBSCRIPTIONS_LIST", "value": "[join(parameters('subscriptionsList'), ',')]" },
          { "name": "SUBSCRIPTION_COUNT",   "value": "[parameters('subscriptionCount')]" },
          { "name": "CLIENT_ID",           "value": "[parameters('servicePrincipalClientId')]" },
          { "name": "CLIENT_SECRET",       "secureValue": "[parameters('servicePrincipalClientSecret')]" },
          { "name": "FIREFLY_ACCESS_KEY",  "secureValue": "[parameters('fireflyAccessKey')]" },
          { "name": "FIREFLY_SECRET_KEY",  "secureValue": "[parameters('fireflySecretKey')]" },
          { "name": "TENANT_ID",           "value": "[subscription().tenantId]" },
          { "name": "IS_PROD",            "value": "[parameters('isProd')]" },
          { "name": "IS_EVENT_DRIVEN",    "value": "[parameters('eventDrivenEnabled')]" },
          { "name": "IS_AUTO_DISCOVER",   "value": "false" },
          { "name": "DIRECTORY_DOMAIN",   "value": "[parameters('directoryDomain')]" }
        ],
        "scriptContent": "# Authenticate with Firefly\n$tokenResp = (Invoke-WebRequest -SkipCertificateCheck -ContentType 'application/json' -Method Post -Uri 'https://api-env1.dev.firefly.ai/api/account/access_keys/login' -Body (@{accessKey=$Env:FIREFLY_ACCESS_KEY;secretKey=$Env:FIREFLY_SECRET_KEY}|ConvertTo-Json)).Content | ConvertFrom-Json\n$jwt = $tokenResp.access_token\nif (-not $jwt) {\n    Write-Error 'Auth failed'\n    exit 1\n}\n\n# Login to Azure\n$securePassword = ConvertTo-SecureString $Env:CLIENT_SECRET -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential($Env:CLIENT_ID, $securePassword)\nConnect-AzAccount -ServicePrincipal -Credential $credential -Tenant $Env:TENANT_ID | Out-Null\n\n$headers = @{\n    'Authorization' = \"Bearer $jwt\"\n    'Content-Type' = 'application/json'\n}\n\n$successCount = 0\n$failedSubscriptions = @()\n\n# Process each subscription\nforeach ($sub in $Env:SUBSCRIPTIONS_LIST -split ',') {\n    # Get subscription details to retrieve display name\n    try {\n        $subscription = Get-AzSubscription -SubscriptionId $sub -ErrorAction Stop\n        $subscriptionDisplayName = $subscription.Name\n    } catch {\n        Write-Warning \"Could not retrieve subscription details for $sub. Using ID as name.\"\n        $subscriptionDisplayName = $sub\n    }\n    \n    Write-Host \"Creating integration for subscription: $subscriptionDisplayName ($sub)\"\n    \n    $bodyObj = [ordered]@{\n        subscriptionId = $sub\n        tenantId = $Env:TENANT_ID\n        applicationId = $Env:CLIENT_ID\n        clientSecret = $Env:CLIENT_SECRET\n        name = $subscriptionDisplayName\n        directoryDomain = $Env:DIRECTORY_DOMAIN\n        isProd = [bool]::Parse($Env:IS_PROD)\n        isEventDriven = [bool]::Parse($Env:IS_EVENT_DRIVEN)\n        isAutoDiscover = [bool]::Parse($Env:IS_AUTO_DISCOVER)\n        isIacAutoDiscoveryDisabled = $false\n    }\n    \n    $body = $bodyObj | ConvertTo-Json -Compress\n    \n    try {\n        $intResp = Invoke-WebRequest -UseBasicParsing -SkipCertificateCheck -Method Post -Uri 'https://api-env1.dev.firefly.ai/api/integrations/azure/' -Headers $headers -Body $body\n        \n        if ($intResp.StatusCode -eq 200 -or $intResp.StatusCode -eq 201) {\n            Write-Host \"Successfully created integration for subscription $subscriptionDisplayName\"\n            $successCount++\n        } else {\n            Write-Warning \"Unexpected status code $($intResp.StatusCode) for subscription $subscriptionDisplayName\"\n            $failedSubscriptions += @{Id=$sub; Name=$subscriptionDisplayName}\n        }\n    } catch {\n        Write-Warning \"Failed to create integration for subscription $subscriptionDisplayName : $($_.Exception.Message)\"\n        \n        if ($_.Exception.Response) {\n            $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())\n            $reader.BaseStream.Position = 0\n            $reader.DiscardBufferedData()\n            $responseBody = $reader.ReadToEnd()\n            Write-Host \"Response body: $responseBody\"\n        }\n        \n        $failedSubscriptions += @{Id=$sub; Name=$subscriptionDisplayName}\n    }\n}\n\nWrite-Host \"`nSummary:\"\nWrite-Host \"Successfully created integrations: $successCount\"\nWrite-Host \"Failed integrations: $($failedSubscriptions.Count)\"\n\nif ($failedSubscriptions.Count -gt 0) {\n    Write-Host \"Failed subscriptions:\"\n    $failedSubscriptions | ForEach-Object { Write-Host \" - $($_.Name) ($($_.Id))\" }\n}\n\n# Exit with error if all subscriptions failed\nif ($successCount -eq 0 -and ($Env:SUBSCRIPTIONS_LIST -split ',').Count -gt 0) {\n    Write-Error \"All subscription integrations failed\"\n    exit 1\n}\n\nWrite-Host \"Integration process completed\""
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid('firefly custom role deployment subscription', subscription().subscriptionId, parameters('servicePrincipalObjectId'), parameters('newguid'))]",
      "properties": {
        "roleDefinitionId": "[concat(subscription().id, '/providers/Microsoft.Authorization/roleDefinitions/', guid('fireflyCustomRole', subscription().subscriptionId))]",
        "principalId": "[parameters('servicePrincipalObjectId')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[concat('firefly-custom-roles-', parameters('newguid'))]"
      ]
    },
    {
      "copy": {
        "name": "subscriptionsTemplateCopy",
        "count": "[length(parameters('subscriptionsList'))]",
        "mode": "Parallel"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('roleAssignSubsTpl-', parameters('newguid'), copyIndex())]",
      "subscriptionId": "[parameters('subscriptionsList')[copyIndex()]]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('firefly-custom-roles-', parameters('newguid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "servicePrincipalObjectId": {
              "value": "[parameters('servicePrincipalObjectId')]"
          },
          "newguid": {
              "value": "[parameters('newguid')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "servicePrincipalObjectId": {
                  "type": "String",
                  "metadata": {
                      "description": "Service principal object Id, needed for Role Assignment"
                  }
              },
              "newguid": {
                  "type": "String",
                  "metadata": {
                      "description": "GUID for unique resource naming"
                  }
              }
          },
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(subscription().id, 'firefly reader', parameters('servicePrincipalObjectId'), parameters('newguid'))]",
              "properties": {
                "roleDefinitionId": "[concat(subscription().id, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(subscription().id, 'firefly billing reader', parameters('servicePrincipalObjectId'), parameters('newguid'))]",
              "properties": {
                "roleDefinitionId": "[concat(subscription().id, '/providers/Microsoft.Authorization/roleDefinitions/', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(subscription().id, 'firefly app config reader', parameters('servicePrincipalObjectId'), parameters('newguid'))]",
              "properties": {
                "roleDefinitionId": "[concat(subscription().id, '/providers/Microsoft.Authorization/roleDefinitions/', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "name": "[guid(subscription().id, 'firefly security reader', parameters('servicePrincipalObjectId'), parameters('newguid'))]",
              "properties": {
                "roleDefinitionId": "[concat(subscription().id, '/providers/Microsoft.Authorization/roleDefinitions/', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {}
        }
      }
    },
    {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type": "Microsoft.Resources/deployments", 
      "apiVersion": "2020-10-01",
      "name": "[concat('create-all-resource-groups-', parameters('newguid'))]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "subscriptionsList": {
              "type": "array"
            },
            "resourceGroupPrefix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "createResourceGroups",
                "count": "[length(parameters('subscriptionsList'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[concat('rg-', copyIndex(), '-deployment')]",
              "subscriptionId": "[parameters('subscriptionsList')[copyIndex()]]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2021-04-01",
                      "name": "[concat(parameters('resourceGroupPrefix'), '-', take(parameters('subscriptionsList')[copyIndex()], 8))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        "parameters": {
          "subscriptionsList": {
            "value": "[parameters('subscriptionsList')]"
          },
          "resourceGroupPrefix": {
            "value": "[parameters('resourceGroupPrefix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('mergedTags')]"
          }
        }
      }
    },
    {
      "copy": {
        "name": "storageAccountsCopy",
        "count": "[if(parameters('eventDrivenEnabled'), length(parameters('subscriptionsList')), 0)]",
        "mode": "Parallel"
      },
      "condition": "[parameters('eventDrivenEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('firefly-storage-', copyIndex(), '-', parameters('newguid'))]",
      "subscriptionId": "[parameters('subscriptionsList')[copyIndex()]]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('create-all-resource-groups-', parameters('newguid'))]",
        "[concat('firefly-storage-', copyIndex(), '-', parameters('newguid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "storageAccountName": {
              "value": "[concat('firefly', uniqueString(parameters('subscriptionsList')[copyIndex()]))]"
          },
          "location": {
              "value": "[parameters('location')]"
          },
          "resourceGroupName": {
              "value": "[concat(parameters('resourceGroupPrefix'), '-', take(parameters('subscriptionsList')[copyIndex()], 8))]"
          },
          "tags": {
              "value": "[variables('mergedTags')]"
          },
          "enforceStorageNetworkRules": {
              "value": "[parameters('enforceStorageNetworkRules')]"
          },
          "fireflyEips": {
              "value": "[parameters('fireflyEips')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "storageAccountName": {
                  "type": "string"
              },
              "location": {
                  "type": "string"
              },
              "resourceGroupName": {
                  "type": "string"
              },
              "tags": {
                  "type": "object"
              },
              "enforceStorageNetworkRules": {
                  "type": "bool"
              },
              "fireflyEips": {
                  "type": "array"
              }
          },
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "storageAccountDeployment",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {},
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('storageAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard_LRS"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "minimumTlsVersion": "TLS1_2",
                        "supportsHttpsTrafficOnly": true,
                        "allowBlobPublicAccess": false,
                        "crossTenantReplicationEnabled": false,
                        "networkAcls": "[if(parameters('enforceStorageNetworkRules'), createObject('defaultAction', 'Deny', 'ipRules', map(parameters('fireflyEips'), lambda('ip', createObject('value', lambdaVariables('ip'), 'action', 'Allow')))), createObject('defaultAction', 'Allow'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "storageAccountId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[reference('storageAccountDeployment').outputs.storageAccountId.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[parameters('resourceGroupName')]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "eventGridCopy",
        "count": "[if(parameters('eventDrivenEnabled'), length(parameters('subscriptionsList')), 0)]",
        "mode": "Parallel"
      },
      "condition": "[parameters('eventDrivenEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('firefly-eventgrid-', copyIndex(), '-', parameters('newguid'))]",
      "subscriptionId": "[parameters('subscriptionsList')[copyIndex()]]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('create-all-resource-groups-', parameters('newguid'))]",
        "[concat('firefly-storage-', copyIndex(), '-', parameters('newguid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "subscriptionId": {
              "value": "[parameters('subscriptionsList')[copyIndex()]]"
          },
          "eventGridTopicName": {
              "value": "[concat(parameters('eventGridTopicName'), '-', parameters('subscriptionsList')[copyIndex()])]"
          },
          "fireflyWebhookUrl": {
              "value": "[parameters('fireflyWebhookUrl')]"
          },
          "location": {
              "value": "[parameters('location')]"
          },
          "tags": {
              "value": "[variables('mergedTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "subscriptionId": {
                  "type": "string"
              },
              "eventGridTopicName": {
                  "type": "string"
              },
              "fireflyWebhookUrl": {
                  "type": "string"
              },
              "location": {
                  "type": "string"
              },
              "tags": {
                  "type": "object"
              }
          },
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.EventGrid/systemTopics",
              "apiVersion": "2021-12-01",
              "name": "[parameters('eventGridTopicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "source": "[concat('/subscriptions/', parameters('subscriptionId'))]",
                "topicType": "Microsoft.Resources.Subscriptions"
              }
            },
            {
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2021-12-01",
              "name": "[concat(parameters('eventGridTopicName'), '/firefly-webhook')]",
              "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', parameters('eventGridTopicName'))]"
              ],
              "properties": {
                "destination": {
                  "endpointType": "WebHook",
                  "properties": {
                    "endpointUrl": "[parameters('fireflyWebhookUrl')]",
                    "maxEventsPerBatch": 1,
                    "preferredBatchSizeInKilobytes": 64
                  }
                },
                "filter": {
                  "includedEventTypes": [
                    "Microsoft.Storage.BlobCreated",
                    "Microsoft.Resources.ResourceWriteSuccess",
                    "Microsoft.Resources.ResourceDeleteSuccess"
                  ],
                  "advancedFilters": [
                    {
                      "operatorType": "StringContains",
                      "key": "subject",
                      "values": ["/providers/Microsoft.Storage/storageAccounts"]
                    }
                  ]
                },
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                  "maxDeliveryAttempts": 30,
                  "eventTimeToLiveInMinutes": 1440
                }
              }
            }
          ],
          "outputs": {}
        }
      }
    },
    {
      "copy": {
        "name": "storageRoleAssignmentsCopy",
        "count": "[if(parameters('eventDrivenEnabled'), length(parameters('subscriptionsList')), 0)]",
        "mode": "Parallel"
      },
      "condition": "[parameters('eventDrivenEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('firefly-storage-roles-', copyIndex(), '-', parameters('newguid'))]",
      "subscriptionId": "[parameters('subscriptionsList')[copyIndex()]]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('create-all-resource-groups-', parameters('newguid'))]",
        "[concat('firefly-storage-', copyIndex(), '-', parameters('newguid'))]",
        "[concat('firefly-custom-roles-', parameters('newguid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "servicePrincipalObjectId": {
              "value": "[parameters('servicePrincipalObjectId')]"
          },
          "storageAccountName": {
              "value": "[concat('firefly', uniqueString(parameters('subscriptionsList')[copyIndex()]))]"
          },
          "resourceGroupName": {
              "value": "[concat(parameters('resourceGroupPrefix'), '-', take(parameters('subscriptionsList')[copyIndex()], 8))]"
          },
          "subscriptionId": {
              "value": "[parameters('subscriptionsList')[copyIndex()]]"
          },
          "newguid": {
              "value": "[parameters('newguid')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "servicePrincipalObjectId": {
                  "type": "string"
              },
              "storageAccountName": {
                  "type": "string"
              },
              "resourceGroupName": {
                  "type": "string"
              },
              "subscriptionId": {
                  "type": "string"
              },
              "newguid": {
                  "type": "string"
              }
          },
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('servicePrincipalObjectId'), 'StorageBlobDataReader', parameters('resourceGroupName'), parameters('newguid'))]",
              "scope": "[concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', parameters('subscriptionId'), '/providers/Microsoft.Authorization/roleDefinitions/', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('servicePrincipalObjectId'), 'FireflyStorageBlobReader', parameters('resourceGroupName'), parameters('newguid'))]",
              "scope": "[concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', parameters('subscriptionId'), '/providers/Microsoft.Authorization/roleDefinitions/', guid('fireflyStorageBlobReader', parameters('subscriptionId')))]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {}
        }
      }
    },
    {
      "copy": {
        "name": "diagnosticSettingsCopy",
        "count": "[if(parameters('eventDrivenEnabled'), length(parameters('subscriptionsList')), 0)]",
        "mode": "Parallel"
      },
      "condition": "[parameters('eventDrivenEnabled')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('firefly-diag-settings-', copyIndex(), '-', parameters('newguid'))]",
      "subscriptionId": "[parameters('subscriptionsList')[copyIndex()]]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('create-all-resource-groups-', parameters('newguid'))]",
        "[concat('firefly-storage-', copyIndex(), '-', parameters('newguid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "storageAccountId": {
              "value": "[reference(concat('firefly-storage-', copyIndex(), '-', parameters('newguid'))).outputs.storageAccountId.value]"
          },
          "subscriptionId": {
              "value": "[parameters('subscriptionsList')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "storageAccountId": {
                  "type": "string"
              },
              "subscriptionId": {
                  "type": "string"
              }
          },
          "variables": {},
          "resources": [
                         {
               "type": "Microsoft.Insights/diagnosticSettings",
               "apiVersion": "2021-05-01-preview",
               "name": "[concat('firefly-diag-', parameters('subscriptionId'))]",
               "properties": {
                 "storageAccountId": "[parameters('storageAccountId')]",
                 "logs": [
                   {
                     "category": "Administrative",
                     "enabled": true,
                     "retentionPolicy": {
                       "enabled": false,
                       "days": 0
                     }
                   }
                 ]
               }
             }
          ],
          "outputs": {}
        }
      }
    }
  ],
  "outputs": {
    "subscriptionCount": {"type":"int","value":"[parameters('subscriptionCount')]"},
    "eventDrivenEnabled": {"type":"bool","value":"[parameters('eventDrivenEnabled')]"},
    "resourceGroupPrefix": {
      "type":"string",
      "value":"[parameters('resourceGroupPrefix')]"
    },
    "storageAccountsDeployed": {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type":"string",
      "value":"[if(parameters('eventDrivenEnabled'), string(length(parameters('subscriptionsList'))), '0')]"
    },
    "eventGridTopicName": {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type":"string",
      "value":"[if(parameters('eventDrivenEnabled'), concat(parameters('eventGridTopicName'), '-multi-subscription'), '')]"
    },
    "eventGridTopicsDeployed": {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type": "string",
      "value": "[if(parameters('eventDrivenEnabled'), string(length(parameters('subscriptionsList'))), '0')]"
    },
    "subscriptionsOnboarded": {
      "type": "array",
      "value": "[parameters('subscriptionsList')]"
    }
  }
}