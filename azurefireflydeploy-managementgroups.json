{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "managementGroupId": {
      "defaultValue": "[managementGroup().name]",
      "type": "string",
      "metadata": {
          "description": "Management group Id, to assign a role assignment to"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": { "description": "Resources location" }
    },
    "servicePrincipalObjectId": {
      "type": "String",
      "metadata": { "description": "Service principal Object Id, needed for Role Assignment" }
    },
    "servicePrincipalClientId": {
      "type": "String",
      "metadata": { "description": "Service principal Client Id" }
    },
    "servicePrincipalClientSecret": {
      "type": "securestring",
      "metadata": { "description": "Service principal client secret" }
    },
    "subscriptionIdForDeployment": {
      "type": "string",
      "metadata": { "description": "Subscription ID where deployment resources will be created" }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": { "description": "Resource group name where deployment scripts will be created" }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": { "description": "Azure Active Directory tenant ID (optional - will be retrieved dynamically if not provided)" }
    },
    "fireflyAccessKey": {
      "type": "securestring",
      "metadata": { "description": "Firefly access key" }
    },
    "fireflySecretKey": {
      "type": "securestring",
      "metadata": { "description": "Firefly secret key" }
    },
    "fireflyUrl": {
      "type": "string",
      "defaultValue": "https://api.firefly.ai",
      "metadata": { "description": "Firefly API URL" }
    },
    "directoryDomain": {
      "type": "string",
      "metadata": { "description": "Your organization's domain (e.g., yourcompany.com)" }
    },
    "eventDrivenEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": { "description": "Enable event-driven monitoring for subscriptions" }
    },
    "fireflyWebhookUrl": {
      "type": "string",
      "defaultValue": "https://azure-events.firefly.ai",
      "metadata": { "description": "Firefly webhook URL for event notifications" }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('firefly', uniqueString(parameters('subscriptionIdForDeployment')))]",
      "metadata": { "description": "Name for the storage account (must be globally unique)" }
    },
    "eventGridTopicName": {
      "type": "string",
      "defaultValue": "[concat('firefly-events-', parameters('newguid'))]",
      "metadata": { "description": "Name for the Event Grid system topic" }
    },
    "newguid": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
          "description": "Just a Guid to append to deployment script name"
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(parameters('managementGroupId'), 'firefly reader mg', parameters('servicePrincipalObjectId'))]",
      "properties": {
        "roleDefinitionId": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'), '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "principalId": "[parameters('servicePrincipalObjectId')]",
        "principalType": "ServicePrincipal",
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(parameters('managementGroupId'), 'firefly billing reader mg', parameters('servicePrincipalObjectId'))]",
      "properties": {
        "roleDefinitionId": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'), '/providers/Microsoft.Authorization/roleDefinitions/', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
        "principalId": "[parameters('servicePrincipalObjectId')]",
        "principalType": "ServicePrincipal",
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(parameters('managementGroupId'), 'firefly app config reader mg', parameters('servicePrincipalObjectId'))]",
      "properties": {
        "roleDefinitionId": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'), '/providers/Microsoft.Authorization/roleDefinitions/', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
        "principalId": "[parameters('servicePrincipalObjectId')]",
        "principalType": "ServicePrincipal",
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(parameters('managementGroupId'), 'firefly security reader mg', parameters('servicePrincipalObjectId'))]",
      "properties": {
        "roleDefinitionId": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'), '/providers/Microsoft.Authorization/roleDefinitions/', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
        "principalId": "[parameters('servicePrincipalObjectId')]",
        "principalType": "ServicePrincipal",
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(parameters('managementGroupId'), 'firefly monitoring reader mg', parameters('servicePrincipalObjectId'))]",
      "properties": {
        "roleDefinitionId": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'), '/providers/Microsoft.Authorization/roleDefinitions/', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
        "principalId": "[parameters('servicePrincipalObjectId')]",
        "principalType": "ServicePrincipal",
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'))]"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[concat('fireflyIntDeploy-', parameters('newguid'))]",
      "subscriptionId": "[parameters('subscriptionIdForDeployment')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
            "scope": "inner"
        },
        "parameters": {
          "managementGroupId": {
              "value": "[parameters('managementGroupId')]"
          },
          "location": {
              "value": "[parameters('location')]"
          },
          "servicePrincipalClientId": {
              "value": "[parameters('servicePrincipalClientId')]"
          },
          "servicePrincipalClientSecret": {
              "value": "[parameters('servicePrincipalClientSecret')]"
          },
          "servicePrincipalObjectId": {
              "value": "[parameters('servicePrincipalObjectId')]"
          },
          "fireflyAccessKey": {
              "value": "[parameters('fireflyAccessKey')]"
          },
          "fireflySecretKey": {
              "value": "[parameters('fireflySecretKey')]"
          },
          "fireflyUrl": {
              "value": "[parameters('fireflyUrl')]"
          },
          "directoryDomain": {
              "value": "[parameters('directoryDomain')]"
          },
          "subscriptionIdForDeployment": {
              "value": "[parameters('subscriptionIdForDeployment')]"
          },
          "eventDrivenEnabled": {
              "value": "[parameters('eventDrivenEnabled')]"
          },
          "fireflyWebhookUrl": {
              "value": "[parameters('fireflyWebhookUrl')]"
          },
          "storageAccountName": {
              "value": "[parameters('storageAccountName')]"
          },
          "eventGridTopicName": {
              "value": "[parameters('eventGridTopicName')]"
          },
          "resourceGroupName": {
              "value": "[parameters('resourceGroupName')]"
          },
          "newguid": {
              "value": "[parameters('newguid')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "managementGroupId": {
                  "type": "string"
              },
              "location": {
                  "type": "string"
              },
              "servicePrincipalClientId": {
                  "type": "string"
              },
              "servicePrincipalClientSecret": {
                  "type": "securestring"
              },
              "servicePrincipalObjectId": {
                  "type": "string"
              },
              "fireflyAccessKey": {
                  "type": "securestring"
              },
              "fireflySecretKey": {
                  "type": "securestring"
              },
              "fireflyUrl": {
                  "type": "string"
              },
              "directoryDomain": {
                  "type": "string"
              },
              "subscriptionIdForDeployment": {
                  "type": "string"
              },
              "eventDrivenEnabled": {
                  "type": "bool"
              },
              "fireflyWebhookUrl": {
                  "type": "string"
              },
              "storageAccountName": {
                  "type": "string"
              },
              "eventGridTopicName": {
                  "type": "string"
              },
              "resourceGroupName": {
                  "type": "string"
              },
              "newguid": {
                  "type": "string"
              }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[concat('firefly-mg-int-script-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "properties": {
                "retentionInterval": "PT1H",
                "timeout": "PT30M",
                "containerSettings": {},
                "cleanupPreference": "Always",
                "azPowerShellVersion": "8.1",
                "environmentVariables": [
                  { "name": "MANAGEMENT_GROUP_ID",   "value": "[parameters('managementGroupId')]" },
                  { "name": "CLIENT_ID",             "value": "[parameters('servicePrincipalClientId')]" },
                  { "name": "CLIENT_SECRET",         "secureValue": "[parameters('servicePrincipalClientSecret')]" },
                  { "name": "FIREFLY_ACCESS_KEY",   "secureValue": "[parameters('fireflyAccessKey')]" },
                  { "name": "FIREFLY_SECRET_KEY",   "secureValue": "[parameters('fireflySecretKey')]" },
                  { "name": "FIREFLY_URL",          "value": "[parameters('fireflyUrl')]" },
                  { "name": "TENANT_ID",             "value": "[subscription().tenantId]"},
                  { "name": "SUBSCRIPTION_ID",       "value": "[parameters('subscriptionIdForDeployment')]" },
                  { "name": "DIRECTORY_DOMAIN",      "value": "[parameters('directoryDomain')]" }
                ],
                "scriptContent": "# Authenticate with Firefly\n$tokenResp = (Invoke-WebRequest -SkipCertificateCheck -ContentType 'application/json' -Method Post -Uri \"$Env:FIREFLY_URL/api/account/access_keys/login\" -Body (@{accessKey=$Env:FIREFLY_ACCESS_KEY;secretKey=$Env:FIREFLY_SECRET_KEY}|ConvertTo-Json)).Content | ConvertFrom-Json\n$jwt = $tokenResp.access_token\nif (-not $jwt) {\n    Write-Error 'Auth failed'\n    exit 1\n}\n\n# Login to Azure\n$securePassword = ConvertTo-SecureString $Env:CLIENT_SECRET -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential($Env:CLIENT_ID, $securePassword)\nConnect-AzAccount -ServicePrincipal -Credential $credential -Tenant $Env:TENANT_ID | Out-Null\n\n# Get all subscriptions under the management group\nWrite-Host \"Getting subscriptions under management group: $Env:MANAGEMENT_GROUP_ID\"\n$mgHierarchy = Get-AzManagementGroup -GroupName $Env:MANAGEMENT_GROUP_ID -Expand -Recurse\n\n# Function to extract subscription IDs from hierarchy\nfunction Get-SubscriptionIds($node) {\n    $subscriptionIds = @()\n    \n    if ($node.Children) {\n        foreach ($child in $node.Children) {\n            if ($child.Type -eq '/subscriptions') {\n                $subscriptionIds += $child.Name\n            } elseif ($child.Type -eq '/providers/Microsoft.Management/managementGroups') {\n                $subscriptionIds += Get-SubscriptionIds $child\n            }\n        }\n    }\n    \n    return $subscriptionIds\n}\n\n$allSubscriptionIds = Get-SubscriptionIds $mgHierarchy\nWrite-Host \"Found $($allSubscriptionIds.Count) subscriptions under management group\"\n\n$headers = @{\n    'Authorization' = \"Bearer $jwt\"\n    'Content-Type' = 'application/json'\n}\n\n$successCount = 0\n$failedSubscriptions = @()\n$createdSubscriptions = @()\n\n# Process each subscription\nforeach ($subId in $allSubscriptionIds) {\n    # Get subscription details to retrieve display name\n    try {\n        $subscription = Get-AzSubscription -SubscriptionId $subId -ErrorAction Stop\n        $subscriptionDisplayName = $subscription.Name\n    } catch {\n        Write-Warning \"Could not retrieve subscription details for $subId. Using ID as name.\"\n        $subscriptionDisplayName = $subId\n    }\n    \n    Write-Host \"Creating integration for subscription: $subscriptionDisplayName ($subId)\"\n    \n    $bodyObj = [ordered]@{\n        subscriptionId = $subId\n        tenantId = $Env:TENANT_ID\n        applicationId = $Env:CLIENT_ID\n        clientSecret = $Env:CLIENT_SECRET\n        name = $subscriptionDisplayName\n        directoryDomain = $Env:DIRECTORY_DOMAIN\n        isAutoDiscover = $true\n    }\n    \n    $body = $bodyObj | ConvertTo-Json -Compress\n    \n    try {\n        $intResp = Invoke-WebRequest -UseBasicParsing -SkipCertificateCheck -Method Post -Uri \"$Env:FIREFLY_URL/api/integrations/azure/\" -Headers $headers -Body $body\n        \n        if ($intResp.StatusCode -eq 200 -or $intResp.StatusCode -eq 201) {\n            Write-Host \"Successfully created integration for subscription $subscriptionDisplayName\"\n            $successCount++\n            $createdSubscriptions += $subId\n        } else {\n            Write-Warning \"Unexpected status code $($intResp.StatusCode) for subscription $subscriptionDisplayName\"\n            $failedSubscriptions += @{Id=$subId; Name=$subscriptionDisplayName}\n        }\n    } catch {\n        Write-Warning \"Failed to create integration for subscription $subscriptionDisplayName : $($_.Exception.Message)\"\n        \n        if ($_.Exception.Response) {\n            $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())\n            $reader.BaseStream.Position = 0\n            $reader.DiscardBufferedData()\n            $responseBody = $reader.ReadToEnd()\n            Write-Host \"Response body: $responseBody\"\n        }\n        \n        $failedSubscriptions += @{Id=$subId; Name=$subscriptionDisplayName}\n    }\n}\n\nWrite-Host \"`nSummary:\"\nWrite-Host \"Successfully created integrations: $successCount\"\nWrite-Host \"Failed integrations: $($failedSubscriptions.Count)\"\n\nif ($failedSubscriptions.Count -gt 0) {\n    Write-Host \"Failed subscriptions:\"\n    $failedSubscriptions | ForEach-Object { Write-Host \" - $($_.Name) ($($_.Id))\" }\n}\n\n# Exit with error if all subscriptions failed\nif ($successCount -eq 0 -and $allSubscriptionIds.Count -gt 0) {\n    Write-Error \"All subscription integrations failed\"\n    exit 1\n}\n\n# Return created subscription IDs for event monitoring setup\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['createdSubscriptions'] = $createdSubscriptions -join ','\n\nWrite-Host \"Integration process completed\""
              }
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false
              }
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.EventGrid/systemTopics",
              "apiVersion": "2021-12-01",
              "name": "[parameters('eventGridTopicName')]",
              "location": "[parameters('location')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ],
              "properties": {
                "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "topicType": "Microsoft.Storage.StorageAccounts"
              }
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2021-12-01",
              "name": "[concat(parameters('eventGridTopicName'), '/firefly-webhook')]",
              "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', parameters('eventGridTopicName'))]"
              ],
              "properties": {
                "destination": {
                  "endpointType": "WebHook",
                  "properties": {
                    "endpointUrl": "[parameters('fireflyWebhookUrl')]",
                    "maxEventsPerBatch": 1,
                    "preferredBatchSizeInKilobytes": 64
                  }
                },
                "filter": {
                  "includedEventTypes": [
                    "Microsoft.Storage.BlobCreated"
                  ]
                },
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                  "maxDeliveryAttempts": 30,
                  "eventTimeToLiveInMinutes": 1440
                }
              }
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('servicePrincipalObjectId'), 'StorageBlobDataReader', resourceGroup().id)]",
              "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('servicePrincipalObjectId'), 'StorageTableDataContributor', resourceGroup().id)]",
              "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                "principalId": "[parameters('servicePrincipalObjectId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[concat('firefly-monitor-diag-settings-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Resources/deploymentScripts', concat('firefly-mg-int-script-', parameters('newguid')))]"
              ],
              "properties": {
                "retentionInterval": "PT1H",
                "timeout": "PT30M",
                "containerSettings": {},
                "cleanupPreference": "Always",
                "azPowerShellVersion": "8.1",
                "environmentVariables": [
                  { "name": "MANAGEMENT_GROUP_ID",   "value": "[parameters('managementGroupId')]" },
                  { "name": "CLIENT_ID",             "value": "[parameters('servicePrincipalClientId')]" },
                  { "name": "CLIENT_SECRET",         "secureValue": "[parameters('servicePrincipalClientSecret')]" },
                  { "name": "TENANT_ID",             "value": "[subscription().tenantId]"},
                  { "name": "STORAGE_ACCOUNT_ID",    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]" }
                ],
                "scriptContent": "# Login to Azure\n$securePassword = ConvertTo-SecureString $Env:CLIENT_SECRET -AsPlainText -Force\n$credential = New-Object System.Management.Automation.PSCredential($Env:CLIENT_ID, $securePassword)\nConnect-AzAccount -ServicePrincipal -Credential $credential -Tenant $Env:TENANT_ID | Out-Null\n\n# Get all subscriptions under the management group\nWrite-Host \"Getting subscriptions under management group: $Env:MANAGEMENT_GROUP_ID\"\n$mgHierarchy = Get-AzManagementGroup -GroupName $Env:MANAGEMENT_GROUP_ID -Expand -Recurse\n\n# Function to extract subscription IDs from hierarchy\nfunction Get-SubscriptionIds($node) {\n    $subscriptionIds = @()\n    \n    if ($node.Children) {\n        foreach ($child in $node.Children) {\n            if ($child.Type -eq '/subscriptions') {\n                $subscriptionIds += $child.Name\n            } elseif ($child.Type -eq '/providers/Microsoft.Management/managementGroups') {\n                $subscriptionIds += Get-SubscriptionIds $child\n            }\n        }\n    }\n    \n    return $subscriptionIds\n}\n\n$allSubscriptionIds = Get-SubscriptionIds $mgHierarchy\nWrite-Host \"Found $($allSubscriptionIds.Count) subscriptions under management group\"\n\n$successCount = 0\n$failedCount = 0\n\n# Configure diagnostic settings for each subscription\nforeach ($subId in $allSubscriptionIds) {\n    Write-Host \"Configuring diagnostic settings for subscription: $subId\"\n    \n    try {\n        # Set context to the subscription\n        Set-AzContext -SubscriptionId $subId | Out-Null\n        \n        # Check if diagnostic setting already exists\n        $existingSettings = Get-AzDiagnosticSetting -ResourceId \"/subscriptions/$subId\" -ErrorAction SilentlyContinue\n        $fireflySettingExists = $false\n        \n        if ($existingSettings) {\n            foreach ($setting in $existingSettings) {\n                if ($setting.Name -like '*firefly*') {\n                    Write-Host \"Firefly diagnostic setting already exists for subscription $subId\"\n                    $fireflySettingExists = $true\n                    break\n                }\n            }\n        }\n        \n        if (-not $fireflySettingExists) {\n            # Create diagnostic setting\n            $diagSettingName = \"firefly-diag-$subId\"\n            \n            Set-AzDiagnosticSetting -ResourceId \"/subscriptions/$subId\" `\n                -Name $diagSettingName `\n                -StorageAccountId $Env:STORAGE_ACCOUNT_ID `\n                -Category 'Administrative' `\n                -Enabled $true | Out-Null\n                \n            Write-Host \"Successfully configured diagnostic settings for subscription $subId\"\n            $successCount++\n        } else {\n            $successCount++\n        }\n    } catch {\n        Write-Warning \"Failed to configure diagnostic settings for subscription $subId : $($_.Exception.Message)\"\n        $failedCount++\n    }\n}\n\nWrite-Host \"`nDiagnostic Settings Summary:\"\nWrite-Host \"Successfully configured: $successCount\"\nWrite-Host \"Failed: $failedCount\"\n\nif ($failedCount -eq $allSubscriptionIds.Count -and $allSubscriptionIds.Count -gt 0) {\n    Write-Error \"Failed to configure diagnostic settings for all subscriptions\"\n    exit 1\n}\n\nWrite-Host \"Diagnostic settings configuration completed\""
              }
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[concat('firefly-mg-monitor-', parameters('newguid'))]",
              "location": "[parameters('location')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ],
              "properties": {
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {},
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "Minute",
                        "interval": 5
                      },
                      "type": "Recurrence"
                    }
                  },
                  "actions": {
                    "Get_Current_Subscriptions": {
                      "type": "Http",
                      "inputs": {
                        "method": "GET",
                        "uri": "[concat('https://management.azure.com/providers/Microsoft.Management/managementGroups/', parameters('managementGroupId'), '?api-version=2021-04-01&$expand=children')]",
                        "authentication": {
                          "type": "ActiveDirectoryOAuth",
                          "tenant": "[subscription().tenantId]",
                          "audience": "https://management.azure.com/",
                          "clientId": "[parameters('servicePrincipalClientId')]",
                          "secret": "[parameters('servicePrincipalClientSecret')]"
                        }
                      }
                    },
                    "Parse_Current_Subscriptions": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_Current_Subscriptions')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "properties": {
                              "type": "object",
                              "properties": {
                                "children": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string"
                                      },
                                      "displayName": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Current_Subscriptions": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Filter_Subscriptions": {
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Parse_Current_Subscriptions')?['properties']?['children']",
                        "where": "@equals(item()?['type'], '/subscriptions')"
                      },
                      "runAfter": {
                        "Parse_Current_Subscriptions": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Initialize_Current_Sub_List": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "currentSubscriptions",
                            "type": "array",
                            "value": "@body('Filter_Subscriptions')"
                          }
                        ]
                      },
                      "runAfter": {
                        "Filter_Subscriptions": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Get_Previous_State": {
                      "type": "Http",
                      "inputs": {
                        "method": "GET",
                        "uri": "[concat('https://', parameters('storageAccountName'), '.table.core.windows.net/managementgroupstate(PartitionKey=''', parameters('managementGroupId'), ''',RowKey=''subscriptions'')')]",
                        "authentication": {
                          "type": "ActiveDirectoryOAuth",
                          "tenant": "[subscription().tenantId]",
                          "audience": "https://storage.azure.com/",
                          "clientId": "[parameters('servicePrincipalClientId')]",
                          "secret": "[parameters('servicePrincipalClientSecret')]"
                        }
                      },
                      "runAfter": {
                        "Initialize_Current_Sub_List": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Parse_Previous_State": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_Previous_State')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "subscriptionIds": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Get_Previous_State": [
                          "Succeeded",
                          "Failed"
                        ]
                      }
                    },
                    "Initialize_Previous_Subs": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "previousSubscriptions",
                            "type": "array",
                            "value": "@if(empty(body('Parse_Previous_State')?['subscriptionIds']), createArray(), split(body('Parse_Previous_State')?['subscriptionIds'], ','))"
                          }
                        ]
                      },
                      "runAfter": {
                        "Parse_Previous_State": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Check_For_New_Subscriptions": {
                      "type": "Foreach",
                      "foreach": "@variables('currentSubscriptions')",
                      "actions": {
                        "Check_If_New": {
                          "type": "If",
                          "expression": {
                            "not": {
                              "contains": [
                                "@variables('previousSubscriptions')",
                                "@items('Check_For_New_Subscriptions')?['name']"
                              ]
                            }
                          },
                          "actions": {
                            "Authenticate_to_Firefly": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[concat(parameters('fireflyUrl'), '/api/account/access_keys/login')]",
                                "body": {
                                  "accessKey": "[parameters('fireflyAccessKey')]",
                                  "secretKey": "[parameters('fireflySecretKey')]"
                                }
                              },
                              "runAfter": {
                                "For_Each_New_Subscription": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "Parse_Auth_Response": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Authenticate_to_Firefly')",
                                "schema": {
                                  "type": "object",
                                  "properties": {
                                    "access_token": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "Authenticate_to_Firefly": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "Create_Firefly_Integration": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[concat(parameters('fireflyUrl'), '/api/integrations/azure/')]",
                                "headers": {
                                  "Authorization": "Bearer @{body('Parse_Auth_Response')?['access_token']}"
                                },
                                "body": {
                                  "subscriptionId": "@items('Check_For_New_Subscriptions')?['name']",
                                  "tenantId": "[subscription().tenantId]",
                                  "applicationId": "[parameters('servicePrincipalClientId')]",
                                  "clientSecret": "[parameters('servicePrincipalClientSecret')]",
                                  "name": "@items('Check_For_New_Subscriptions')?['displayName']",
                                  "directoryDomain": "[parameters('directoryDomain')]",
                                  "isAutoDiscover": true
                                }
                              },
                              "runAfter": {
                                "Parse_Auth_Response": [
                                  "Succeeded"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_Previous_Subs": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Update_State": {
                      "type": "Http",
                      "inputs": {
                        "method": "PUT",
                        "uri": "[concat('https://', parameters('storageAccountName'), '.table.core.windows.net/managementgroupstate(PartitionKey=''', parameters('managementGroupId'), ''',RowKey=''subscriptions'')')]",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "body": {
                          "PartitionKey": "[parameters('managementGroupId')]",
                          "RowKey": "subscriptions",
                          "subscriptionIds": "@join(select(variables('currentSubscriptions'), item()?['name']), ',')",
                          "lastUpdated": "@utcNow()"
                        },
                        "authentication": {
                          "type": "ActiveDirectoryOAuth",
                          "tenant": "[subscription().tenantId]",
                          "audience": "https://storage.azure.com/",
                          "clientId": "[parameters('servicePrincipalClientId')]",
                          "secret": "[parameters('servicePrincipalClientSecret')]"
                        }
                      },
                      "runAfter": {
                        "Check_For_New_Subscriptions": [
                          "Succeeded"
                        ]
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
              "apiVersion": "2021-09-01",
              "name": "[concat(parameters('storageAccountName'), '/default/managementgroupstate')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ],
              "properties": {}
            }
          ],
          "outputs": {
            "tenantId": {
              "type": "string",
              "value": "[subscription().tenantId]"
            },
            "storageAccountId": {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "string",
              "value": "[if(parameters('eventDrivenEnabled'), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '')]"
            },
            "eventGridTopicId": {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "string",
              "value": "[if(parameters('eventDrivenEnabled'), resourceId('Microsoft.EventGrid/systemTopics', parameters('eventGridTopicName')), '')]"
            },
            "logicAppId": {
              "condition": "[parameters('eventDrivenEnabled')]",
              "type": "string",
              "value": "[if(parameters('eventDrivenEnabled'), resourceId('Microsoft.Logic/workflows', concat('firefly-mg-monitor-', parameters('newguid'))), '')]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "subscriptionIdForDeployment": {"type":"string","value":"[parameters('subscriptionIdForDeployment')]"},
    "managementGroupId": {"type":"string","value":"[parameters('managementGroupId')]"},
    "eventDrivenEnabled": {"type":"bool","value":"[parameters('eventDrivenEnabled')]"},
    "storageAccountName": {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type":"string",
      "value":"[if(parameters('eventDrivenEnabled'), parameters('storageAccountName'), '')]"
    },
    "eventGridTopicName": {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type":"string",
      "value":"[if(parameters('eventDrivenEnabled'), parameters('eventGridTopicName'), '')]"
    },
    "logicAppName": {
      "condition": "[parameters('eventDrivenEnabled')]",
      "type":"string",
      "value":"[if(parameters('eventDrivenEnabled'), concat('firefly-mg-monitor-', parameters('newguid')), '')]"
    }
  }
}